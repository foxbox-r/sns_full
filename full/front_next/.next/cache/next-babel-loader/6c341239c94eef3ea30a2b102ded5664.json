{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { CalculatorFilled, PushpinTwoTone } from \"@ant-design/icons\";\nimport { all, fork, takeEvery, put, delay, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_ERROR, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_ERROR, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_ERROR, generateDummyPost } from \"../reducers/postReducer\";\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/userReducer\";\nimport axios from \"axios\";\n\nfunction addPostApi(data) {\n  console.log(\"api\");\n  return axios.post(\"/post\", {\n    content: data.postContent\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostApi, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          put({\n            type: ADD_POST_ERROR,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: {\n              id: action.data.id\n            }\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: REMOVE_POST_TO_ME,\n            data: {\n              id: action.data.id\n            }\n          });\n\n        case 7:\n          _context2.next = 12;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          put({\n            type: REMOVE_POST_ERROR,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction addCommentApi(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.postContent\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentApi, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: ADD_COMMENT_ERROR,\n            data: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction loadPostApi(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostApi, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context4.next = 8;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: {\n              newLoadedPosts: result.data\n            }\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 14;\n          return put({\n            type: LOAD_POST_ERROR,\n            data: _context4.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/WEB/full/front_next/sagas/postSaga.js"],"names":["addPost","removePost","addComment","loadPost","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","postSaga","CalculatorFilled","PushpinTwoTone","all","fork","takeEvery","put","delay","call","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_ERROR","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_TO_ME","axios","addPostApi","data","console","log","post","content","postContent","action","result","type","id","error","addCommentApi","postId","loadPostApi","newLoadedPosts"],"mappings":"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","sourcesContent":["import { CalculatorFilled, PushpinTwoTone } from \"@ant-design/icons\";\r\nimport {all,fork,takeEvery,put,delay,call} from \"redux-saga/effects\"\r\nimport shortId from \"shortid\"\r\nimport {\r\n    ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_ERROR,\r\n    REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_ERROR,\r\n     ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_ERROR,\r\n     LOAD_POST_REQUEST,LOAD_POST_SUCCESS,LOAD_POST_ERROR,\r\n     generateDummyPost\r\n} from \"../reducers/postReducer\"\r\nimport {\r\n    ADD_POST_TO_ME,REMOVE_POST_TO_ME,\r\n} from \"../reducers/userReducer\"\r\n\r\nimport axios from \"axios\";\r\n\r\nfunction addPostApi(data){ \r\n    console.log(\"api\");\r\n    return axios.post(\"/post\",{content:data.postContent});\r\n}\r\n\r\nfunction* addPost(action){//(data:{postContent})\r\n    try{\r\n        const result = yield call(addPostApi,action.data);\r\n        yield put({ \r\n            type:ADD_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:result.data.id\r\n        })\r\n    } catch(err){\r\n        put({\r\n            type:ADD_POST_ERROR,\r\n            error:err,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* removePost(action){//(data:{id})\r\n    try{\r\n        yield delay(1000);\r\n        yield put({ \r\n            type:REMOVE_POST_SUCCESS,\r\n            data:{\r\n                id:action.data.id,\r\n            }\r\n        });\r\n        yield put({\r\n            type:REMOVE_POST_TO_ME,\r\n            data:{\r\n                id:action.data.id,\r\n            }\r\n        })\r\n    } catch(err){\r\n        put({\r\n            type:REMOVE_POST_ERROR,\r\n            error:err,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentApi(data){ \r\n    return axios.post(`/post/${data.postId}/comment`,{content:data.postContent});\r\n}\r\n\r\nfunction* addComment(action){//(data:{postId,content,userId})\r\n    try{\r\n        const result = yield call(addCommentApi,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_ERROR,\r\n            data:err\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostApi(data){\r\n    return axios.post(\"/post\",data);\r\n}\r\n\r\nfunction* loadPost(action){//\r\n    try{\r\n        const result = yield call(loadPostApi,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:LOAD_POST_SUCCESS,\r\n            data:{\r\n                newLoadedPosts:result.data\r\n            }\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type:LOAD_POST_ERROR,\r\n            data:err\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeEvery(REMOVE_POST_REQUEST,removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST,addComment)\r\n}\r\nfunction* watchLoadPost(){\r\n    yield takeEvery(LOAD_POST_REQUEST,loadPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}