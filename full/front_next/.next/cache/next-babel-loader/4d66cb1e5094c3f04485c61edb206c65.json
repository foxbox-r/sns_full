{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  post: {\n    mainPosts: []\n  }\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case LOG_IN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case LOG_OUT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/WEB/front_next/reducers/index.js"],"names":["HYDRATE","initialState","post","mainPosts","rootReducer","state","action","type","payload","LOG_IN","user","isLoggedIn","data","LOG_OUT"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAC;AADT;AAFY,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACJ,YAAP,EAAoBK,MAApB,KAA8B;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,OAAL;AACI,6CAAWK,KAAX,GAAoBC,MAAM,CAACE,OAA3B;;AACJ,SAAKC,MAAL;AACI,6CACOJ,KADP;AAEIK,QAAAA,IAAI,kCACGL,KAAK,CAACK,IADT;AAEAC,UAAAA,UAAU,EAAC,IAFX;AAGAD,UAAAA,IAAI,EAACJ,MAAM,CAACM;AAHZ;AAFR;;AAQJ,SAAKC,OAAL;AACI,6CACOR,KADP;AAEIK,QAAAA,IAAI,kCACGL,KAAK,CAACK,IADT;AAEAC,UAAAA,UAAU,EAAC,KAFX;AAGAD,UAAAA,IAAI,EAAC;AAHL;AAFR;;AAQJ;AACI,aAAOL,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\";\r\nconst initialState = {\r\n\r\n    post:{\r\n        mainPosts:[]\r\n    }\r\n};\r\n\r\n \r\nconst rootReducer = (state=initialState,action) =>{\r\n    switch(action.type){\r\n        case HYDRATE:\r\n            return {...state,...action.payload}\r\n        case LOG_IN:\r\n            return {\r\n                ...state,\r\n                user:{\r\n                    ...state.user,\r\n                    isLoggedIn:true,\r\n                    user:action.data,\r\n                }\r\n            }\r\n        case LOG_OUT:\r\n            return {\r\n                ...state,\r\n                user:{\r\n                    ...state.user,\r\n                    isLoggedIn:false,\r\n                    user:null,\r\n                }\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}