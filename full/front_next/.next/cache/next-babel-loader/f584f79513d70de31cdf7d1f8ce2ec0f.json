{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeEvery, put, delay } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_ERROR } from \"../reducers/postReducer\";\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          put({\n            type: ADD_POST_ERROR,\n            error: _context.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/WEB/front_next/sagas/postSaga.js"],"names":["addPost","watchAddPost","postSaga","all","fork","takeEvery","put","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","action","type","error"],"mappings":";;oDAKUA,O;qDAcAC,Y;qDAIeC,Q;;AAvBzB,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,SAAjB,EAA2BC,GAA3B,EAA+BC,KAA/B,QAA2C,oBAA3C;AACA,SACIC,gBADJ,EACqBC,gBADrB,EACsCC,cADtC,QAEO,yBAFP;;AAIA,SAAUV,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMJ,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNM,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQH,UAAAA,GAAG,CAAC;AACAM,YAAAA,IAAI,EAACF,cADL;AAEAG,YAAAA,KAAK;AAFL,WAAD,CAAH;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,SAAS,CAACG,gBAAD,EAAkBR,OAAlB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all,fork,takeEvery,put,delay} from \"redux-saga/effects\"\r\nimport {\r\n    ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_ERROR,\r\n} from \"../reducers/postReducer\"\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS\r\n        });\r\n    } catch(err){\r\n        put({\r\n            type:ADD_POST_ERROR,\r\n            error:err,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}