{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CalculatorFilled, PushpinTwoTone } from \"@ant-design/icons\";\nimport { all, fork, takeEvery, put, delay, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_ERROR, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_ERROR, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_ERROR, generateDummyPost } from \"../reducers/postReducer\";\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/userReducer\";\n\nfunction addPostApi(data) {\n  return axios.post(\"/post\", {\n    content: data.postContent\n  });\n}\n\nfunction* addPost(action) {\n  //(data:{postContent})\n  try {\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        postContent: action.data.postContent\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id\n      }\n    });\n  } catch (err) {\n    put({\n      type: ADD_POST_ERROR,\n      error: err\n    });\n  }\n}\n\nfunction* removePost(action) {\n  //(data:{id})\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id: action.data.id\n      }\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: {\n        id: action.data.id\n      }\n    });\n  } catch (err) {\n    put({\n      type: REMOVE_POST_ERROR,\n      error: err\n    });\n  }\n}\n\nfunction* addComment(action) {\n  //(data:{postId,content,userId})\n  try {\n    // const result = yield call(addCommentAPI,action.data);\n    yield delay(1000);\n    yield put(_objectSpread({\n      type: ADD_COMMENT_SUCCESS\n    }, action.data));\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_ERROR,\n      data: err\n    });\n  }\n}\n\nfunction* loadPost(action) {\n  //\n  try {\n    const newPosts = generateDummyPost(2);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: {\n        newLoadedPosts: newPosts\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_ERROR,\n      data: err\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeEvery(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeEvery(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield takeEvery(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["C:/WEB/front_next/sagas/postSaga.js"],"names":["CalculatorFilled","PushpinTwoTone","all","fork","takeEvery","put","delay","call","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_ERROR","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_TO_ME","addPostApi","data","axios","post","content","postContent","addPost","action","id","generate","type","err","error","removePost","addComment","loadPost","newPosts","newLoadedPosts","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import { CalculatorFilled, PushpinTwoTone } from \"@ant-design/icons\";\r\nimport {all,fork,takeEvery,put,delay,call} from \"redux-saga/effects\"\r\nimport shortId from \"shortid\"\r\nimport {\r\n    ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_ERROR,\r\n    REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_ERROR,\r\n     ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_ERROR,\r\n     LOAD_POST_REQUEST,LOAD_POST_SUCCESS,LOAD_POST_ERROR,\r\n     generateDummyPost\r\n} from \"../reducers/postReducer\"\r\nimport {\r\n    ADD_POST_TO_ME,REMOVE_POST_TO_ME,\r\n} from \"../reducers/userReducer\"\r\n\r\nfunction addPostApi(data){ \r\n    return axios.post(\"/post\",{content:data.postContent});\r\n}\r\n\r\nfunction* addPost(action){//(data:{postContent})\r\n    try{\r\n        const id = shortId.generate();\r\n        yield delay(1000);\r\n        yield put({ \r\n            type:ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                postContent:action.data.postContent,\r\n            }\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:{\r\n                id\r\n            }\r\n        })\r\n    } catch(err){\r\n        put({\r\n            type:ADD_POST_ERROR,\r\n            error:err,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* removePost(action){//(data:{id})\r\n    try{\r\n        yield delay(1000);\r\n        yield put({ \r\n            type:REMOVE_POST_SUCCESS,\r\n            data:{\r\n                id:action.data.id,\r\n            }\r\n        });\r\n        yield put({\r\n            type:REMOVE_POST_TO_ME,\r\n            data:{\r\n                id:action.data.id,\r\n            }\r\n        })\r\n    } catch(err){\r\n        put({\r\n            type:REMOVE_POST_ERROR,\r\n            error:err,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* addComment(action){//(data:{postId,content,userId})\r\n    try{\r\n        // const result = yield call(addCommentAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            ...action.data\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_ERROR,\r\n            data:err\r\n        })\r\n    }\r\n}\r\n\r\nfunction* loadPost(action){//\r\n    try{\r\n        const newPosts = generateDummyPost(2);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:LOAD_POST_SUCCESS,\r\n            data:{\r\n                newLoadedPosts:newPosts\r\n            }\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type:LOAD_POST_ERROR,\r\n            data:err\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeEvery(REMOVE_POST_REQUEST,removePost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST,addComment)\r\n}\r\nfunction* watchLoadPost(){\r\n    yield takeEvery(LOAD_POST_REQUEST,loadPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}