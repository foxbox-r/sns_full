{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { CalculatorFilled, PushpinTwoTone } from \"@ant-design/icons\";\nimport { all, fork, takeEvery, put, delay, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_ERROR, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_ERROR } from \"../reducers/postReducer\";\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/userReducer\";\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          id = shortId.generate();\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              postContent: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: {\n              id: id\n            }\n          });\n\n        case 8:\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          put({\n            type: ADD_POST_ERROR,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put(_objectSpread({\n            type: ADD_COMMENT_SUCCESS\n          }, action.data));\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_ERROR,\n            data: _context2.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/WEB/front_next/sagas/postSaga.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","CalculatorFilled","PushpinTwoTone","all","fork","takeEvery","put","delay","call","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","ADD_POST_TO_ME","REMOVE_POST_TO_ME","action","id","generate","type","data","postContent","error"],"mappings":";;;;;;;oDAWUA,O;qDAyBAC,U;qDAgBAC,Y;qDAIAC,e;qDAIeC,Q;;AA5DzB,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,mBAAjD;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,SAAjB,EAA2BC,GAA3B,EAA+BC,KAA/B,EAAqCC,IAArC,QAAgD,oBAAhD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACIC,gBADJ,EACqBC,gBADrB,EACsCC,cADtC,EAEKC,mBAFL,EAEyBC,mBAFzB,EAE6CC,iBAF7C,QAGO,yBAHP;AAIA,SACIC,cADJ,EACmBC,iBADnB,QAEO,yBAFP;;AAIA,SAAUrB,OAAV,CAAkBsB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,UAAAA,EAFd,GAEmBV,OAAO,CAACW,QAAR,EAFnB;AAAA;AAGQ,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMD,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACV,gBADC;AAENW,YAAAA,IAAI,EAAC;AACDH,cAAAA,EAAE,EAAFA,EADC;AAEDI,cAAAA,WAAW,EAACL,MAAM,CAACI;AAFlB;AAFC,WAAD,CAAT;;AAJR;AAAA;AAWQ,iBAAMhB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACL,cADC;AAENM,YAAAA,IAAI,EAAC;AACDH,cAAAA,EAAE,EAAFA;AADC;AAFC,WAAD,CAAT;;AAXR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBQb,UAAAA,GAAG,CAAC;AACAe,YAAAA,IAAI,EAACT,cADL;AAEAY,YAAAA,KAAK;AAFL,WAAD,CAAH;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAU3B,UAAV,CAAqBqB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMX,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMD,GAAG;AACLe,YAAAA,IAAI,EAACP;AADA,aAEFI,MAAM,CAACI,IAFL,EAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMhB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACN,iBADC;AAENO,YAAAA,IAAI;AAFE,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUxB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,SAAS,CAACK,gBAAD,EAAkBd,OAAlB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,SAAS,CAACQ,mBAAD,EAAqBhB,UAArB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNC,IAAI,CAACN,YAAD,CADE,EAENM,IAAI,CAACL,eAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { CalculatorFilled, PushpinTwoTone } from \"@ant-design/icons\";\r\nimport {all,fork,takeEvery,put,delay,call} from \"redux-saga/effects\"\r\nimport shortId from \"shortid\"\r\nimport {\r\n    ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_ERROR,\r\n     ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_ERROR,\r\n} from \"../reducers/postReducer\"\r\nimport {\r\n    ADD_POST_TO_ME,REMOVE_POST_TO_ME,\r\n} from \"../reducers/userReducer\"\r\n\r\nfunction* addPost(action){//({postContent})\r\n    try{\r\n        const id = shortId.generate();\r\n        yield delay(1000);\r\n        yield put({ \r\n            type:ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                postContent:action.data,\r\n            }\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:{\r\n                id\r\n            }\r\n        })\r\n    } catch(err){\r\n        put({\r\n            type:ADD_POST_ERROR,\r\n            error:err,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* addComment(action){//(data:{postId,content,userId})\r\n    try{\r\n        // const result = yield call(addCommentAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            ...action.data\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_ERROR,\r\n            data:err\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeEvery(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeEvery(ADD_COMMENT_REQUEST,addComment)\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}