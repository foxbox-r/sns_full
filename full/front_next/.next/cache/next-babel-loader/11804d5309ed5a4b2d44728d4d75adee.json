{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nconst initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostDone: false,\n  addPostLoading: false,\n  addPostError: null,\n  loadPostDone: false,\n  loadPostLoading: false,\n  loadPostError: null,\n  hasMorePosts: true,\n  removePostDone: false,\n  removePostLoading: false,\n  removePostError: null,\n  addCommentDone: false,\n  addCommentLoading: false,\n  addCommentError: null,\n  likePostDone: false,\n  likePostLoading: false,\n  likePostError: null,\n  unLikePostDone: false,\n  unLikePostLoading: false,\n  unLikePostError: null,\n  uploadImagesDone: false,\n  uploadImagesLoading: false,\n  uploadImagesError: null\n};\n\nconst getRandomImg = () => {\n  const arr = [];\n  const randomValue = Math.random() * 10 + 1;\n\n  for (let i = 0; i < randomValue; i++) arr.push({\n    src: faker.image.image()\n  });\n\n  return arr;\n};\n\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: getRandomImg(),\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(0));\nexport const ADD_POST_REQUEST = \"postReducer/ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"postReducer/ADD_POST_SUCCESS\";\nexport const ADD_POST_ERROR = \"postReducer/ADD_POST_ERROR\";\nexport const REMOVE_POST_REQUEST = \"postReducer/REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"postReducer/REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_ERROR = \"postReducer/REMOVE_POST_ERROR\";\nexport const ADD_COMMENT_REQUEST = \"postReducer/ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"postReducer/ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_ERROR = \"postReducer/ADD_COMMENT_ERROR\";\nexport const LOAD_POST_REQUEST = \"postReducer/LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"postReducer/LOAD_POST_SUCCESS\";\nexport const LOAD_POST_ERROR = \"postReducer/LOAD_POST_ERROR\";\nexport const LIKE_POST_REQUEST = \"postReducer/LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"postReducer/LIKE_POST_SUCCESS\";\nexport const LIKE_POST_ERROR = \"postReducer/LIKE_POST_ERROR\";\nexport const UNLIKE_POST_REQUEST = \"postReducer/UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"postReducer/UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_ERROR = \"postReducer/UNLIKE_POST_ERROR\";\nexport const UPLOAD_IMAGES_REQUEST = \"postReducer/UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"postReducer/UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_ERROR = \"postReducer/UPLOAD_IMAGES_ERROR\";\nexport const REMOVE_IMAGE = \"postReducer/REMOVE_IMAGE\";\nexport const addPostRequestAction = data => ({\n  //({postContent})\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const removePostRequestAction = data => ({\n  //({id})\n  type: REMOVE_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  //({postId,content,userId})\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  //{id,postContent}\n  id: data.id,\n  content: data.postContent,\n  User: {\n    id: 1,\n    nickname: \"zero\"\n  },\n  Images: getRandomValue(imgs),\n  Comments: []\n});\n\nconst postReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        //data:addPostApi().data\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_ERROR:\n        draft.addPostLoading = false;\n        draft.addPostError = action.data;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        //data:{postId}\n        draft.mainPosts = draft.mainPosts.filter(post => post.id !== action.data.postId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_ERROR:\n        draft.removePostLoading = false;\n        draft.removePostError = action.data;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addComentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          //data:addCommentApi().data\n          const post = draft.mainPosts.find(post => post.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_ERROR:\n        //{data:err}\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.data;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        //data:loadPostApi().data\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        break;\n\n      case LOAD_POST_ERROR:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.data;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          //{data:{postId,UserId}}\n          console.log(\"=========\", draft.mainPosts);\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          const post = draft.mainPosts.find(post => post.id === action.data.postId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          break;\n        }\n\n      case LIKE_POST_ERROR:\n        draft.likePostLoading = false;\n        draft.likePostError = action.data;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unLikePostLoading = true;\n        draft.unLikePostDone = false;\n        draft.unLikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          //{data:{postId,UserId}}\n          draft.unLikePostLoading = false;\n          draft.unLikePostDone = true;\n          const post = draft.mainPosts.find(post => post.id === action.data.postId);\n          post.Likers = post.Likers.filter(user => user.id !== action.data.UserId);\n          break;\n        }\n\n      case UNLIKE_POST_ERROR:\n        draft.unLikePostLoading = false;\n        draft.unLikePostError = action.data;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.upLoadLoading = true;\n        draft.upLoadDone = false;\n        draft.upLoadError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        // {data:uploadImagesApi().data}\n        draft.imagePaths = action.data;\n        draft.upLoadLoading = false;\n        draft.upLoadDone = true;\n        break;\n\n      case UPLOAD_IMAGES_ERROR:\n        draft.upLoadLoading = false;\n        draft.upLoadError = action.data;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.index);\n\n      default:\n        // return state;\n        break;\n    }\n  });\n};\n\nexport default postReducer;","map":{"version":3,"sources":["C:/WEB/full/front_next/reducers/postReducer.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostDone","addPostLoading","addPostError","loadPostDone","loadPostLoading","loadPostError","hasMorePosts","removePostDone","removePostLoading","removePostError","addCommentDone","addCommentLoading","addCommentError","likePostDone","likePostLoading","likePostError","unLikePostDone","unLikePostLoading","unLikePostError","uploadImagesDone","uploadImagesLoading","uploadImagesError","getRandomImg","arr","randomValue","Math","random","i","push","src","image","generateDummyPost","number","Array","fill","map","v","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","Comments","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_ERROR","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_ERROR","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_ERROR","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_ERROR","REMOVE_IMAGE","addPostRequestAction","data","type","removePostRequestAction","addCommentRequestAction","dummyPost","postContent","getRandomValue","imgs","postReducer","state","action","draft","unshift","filter","post","postId","addComentDone","find","PostId","length","console","log","Likers","UserId","user","upLoadLoading","upLoadDone","upLoadError","index"],"mappings":"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","sourcesContent":["import shortId from \"shortid\"\r\nimport produce from \"immer\"\r\nimport faker from \"faker\"\r\n\r\nconst initialState = {\r\n    mainPosts:[],\r\n    imagePaths:[],\r\n\r\n    addPostDone:false,\r\n    addPostLoading:false,\r\n    addPostError:null,\r\n\r\n    loadPostDone:false,\r\n    loadPostLoading:false,\r\n    loadPostError:null,\r\n    hasMorePosts:true,\r\n\r\n    removePostDone:false,\r\n    removePostLoading:false,\r\n    removePostError:null,\r\n\r\n    addCommentDone:false,\r\n    addCommentLoading:false,\r\n    addCommentError:null,\r\n\r\n    likePostDone:false,\r\n    likePostLoading:false,\r\n    likePostError:null,\r\n\r\n    unLikePostDone:false,\r\n    unLikePostLoading:false,\r\n    unLikePostError:null,\r\n\r\n    uploadImagesDone:false,\r\n    uploadImagesLoading:false,\r\n    uploadImagesError:null,\r\n}\r\nconst getRandomImg = ()=>{\r\n    const arr = [];\r\n    const randomValue = Math.random()*10+1;\r\n    for(let i=0;i<randomValue;i++)\r\n        arr.push({\r\n            src:faker.image.image()\r\n        });\r\n    return arr;\r\n};\r\nexport const generateDummyPost = number => Array(number).fill().map((v,i)=>({\r\n    id:shortId.generate(),\r\n    User:{\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content:faker.lorem.paragraph(),\r\n    Images:getRandomImg(),\r\n    Comments:[{\r\n        User:{\r\n            id:shortId.generate(),\r\n            nickname:faker.name.findName()\r\n        },\r\n        content:faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(0))\r\n\r\nexport const ADD_POST_REQUEST = \"postReducer/ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"postReducer/ADD_POST_SUCCESS\";\r\nexport const ADD_POST_ERROR = \"postReducer/ADD_POST_ERROR\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"postReducer/REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"postReducer/REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_ERROR = \"postReducer/REMOVE_POST_ERROR\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"postReducer/ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"postReducer/ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_ERROR = \"postReducer/ADD_COMMENT_ERROR\";\r\n\r\nexport const LOAD_POST_REQUEST = \"postReducer/LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"postReducer/LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_ERROR = \"postReducer/LOAD_POST_ERROR\";\r\n\r\nexport const LIKE_POST_REQUEST = \"postReducer/LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"postReducer/LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_ERROR = \"postReducer/LIKE_POST_ERROR\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"postReducer/UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"postReducer/UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_ERROR = \"postReducer/UNLIKE_POST_ERROR\";\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"postReducer/UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"postReducer/UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_ERROR = \"postReducer/UPLOAD_IMAGES_ERROR\";\r\n\r\nexport const REMOVE_IMAGE = \"postReducer/REMOVE_IMAGE\"\r\n\r\nexport const addPostRequestAction = data =>({//({postContent})\r\n    type:ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const removePostRequestAction = data =>({//({id})\r\n    type:REMOVE_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addCommentRequestAction = (data)=>({//({postId,content,userId})\r\n    type:ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPost = (data)=> ({//{id,postContent}\r\n    id:data.id,\r\n    content:data.postContent,\r\n    User:{\r\n        id:1,\r\n        nickname:\"zero\"\r\n    },\r\n    Images:getRandomValue(imgs),\r\n    Comments:[],\r\n})\r\n\r\nconst postReducer = (state=initialState,action)=>{\r\n    return produce(state,(draft)=>{\r\n        switch(action.type){\r\n            \r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS://data:addPostApi().data\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_ERROR:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.data;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS://data:{postId}\r\n                draft.mainPosts = draft.mainPosts.filter(post=>post.id !== action.data.postId);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_ERROR:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.data;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addComentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{//data:addCommentApi().data\r\n                const post = draft.mainPosts.find(post=>post.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n            }\r\n            case ADD_COMMENT_ERROR://{data:err}\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.data;\r\n                break;\r\n\r\n            case LOAD_POST_REQUEST:\r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n            case LOAD_POST_SUCCESS://data:loadPostApi().data\r\n                draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                draft.hasMorePosts = draft.mainPosts.length<10;\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                break;\r\n            case LOAD_POST_ERROR:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.data;\r\n                break;\r\n\r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS:{//{data:{postId,UserId}}\r\n                console.log(\"=========\",draft.mainPosts)\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                const post = draft.mainPosts.find(post=>post.id === action.data.postId)\r\n                post.Likers.push({id:action.data.UserId})\r\n                break;\r\n            }\r\n            case LIKE_POST_ERROR:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.data;\r\n                break;\r\n\r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unLikePostLoading = true;\r\n                draft.unLikePostDone = false;\r\n                draft.unLikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS:{//{data:{postId,UserId}}\r\n                draft.unLikePostLoading = false;\r\n                draft.unLikePostDone = true;\r\n                const post = draft.mainPosts.find(post => post.id === action.data.postId);\r\n                post.Likers = post.Likers.filter(user => user.id !== action.data.UserId)\r\n                break;\r\n            }\r\n            case UNLIKE_POST_ERROR:\r\n                draft.unLikePostLoading = false;\r\n                draft.unLikePostError = action.data;\r\n                break;\r\n            \r\n            case UPLOAD_IMAGES_REQUEST:\r\n                draft.upLoadLoading = true;\r\n                draft.upLoadDone = false;\r\n                draft.upLoadError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: // {data:uploadImagesApi().data}\r\n                draft.imagePaths = action.data\r\n                draft.upLoadLoading = false;\r\n                draft.upLoadDone = true;\r\n                break;\r\n            case UPLOAD_IMAGES_ERROR:\r\n                draft.upLoadLoading = false;\r\n                draft.upLoadError = action.data;\r\n                break;\r\n\r\n            case REMOVE_IMAGE:\r\n                draft.imagePaths = draft.imagePaths.filter((v,i)=> i !== action.index)\r\n\r\n            default :\r\n                // return state;\r\n                break;\r\n        }\r\n    })\r\n}\r\n\r\nexport default postReducer;"]},"metadata":{},"sourceType":"module"}